{"version":3,"names":["AnimatedScreen","Animated","createAnimatedComponent","InnerScreen","ENABLE_FABRIC","global","_IS_FABRIC","ReanimatedNativeStackScreen","React","forwardRef","props","ref","children","rest","progress","useSharedValue","closing","goingForward","useEvent","event","value","Platform","OS","displayName"],"sources":["ReanimatedNativeStackScreen.tsx"],"sourcesContent":["import React from 'react';\nimport { Platform } from 'react-native';\nimport {\n  InnerScreen,\n  ScreenProps,\n  TransitionProgressEventType,\n} from 'react-native-screens';\n\n// @ts-ignore file to be used only if `react-native-reanimated` available in the project\nimport Animated, { useEvent, useSharedValue } from 'react-native-reanimated';\nimport ReanimatedTransitionProgressContext from './ReanimatedTransitionProgressContext';\n\nconst AnimatedScreen = Animated.createAnimatedComponent(\n  InnerScreen as unknown as React.ComponentClass\n);\n\n// We use prop added to global by reanimated since it seems safer than the one from RN. See:\n// https://github.com/software-mansion/react-native-reanimated/blob/3fe8b35b05e82b2f2aefda1fb97799cf81e4b7bb/src/reanimated2/UpdateProps.ts#L46\n// @ts-expect-error nativeFabricUIManager is not yet included in the RN types\nconst ENABLE_FABRIC = !!global?._IS_FABRIC;\n\nconst ReanimatedNativeStackScreen = React.forwardRef<\n  typeof AnimatedScreen,\n  ScreenProps\n>((props, ref) => {\n  const { children, ...rest } = props;\n\n  const progress = useSharedValue(0);\n  const closing = useSharedValue(0);\n  const goingForward = useSharedValue(0);\n\n  return (\n    <AnimatedScreen\n      // @ts-ignore some problems with ref and onTransitionProgressReanimated being \"fake\" prop for parsing of `useEvent` return value\n      ref={ref}\n      onTransitionProgressReanimated={useEvent(\n        (event: TransitionProgressEventType) => {\n          'worklet';\n          progress.value = event.progress;\n          closing.value = event.closing;\n          goingForward.value = event.goingForward;\n        },\n        [\n          // This should not be necessary, but is not properly managed by `react-native-reanimated`\n          // @ts-ignore wrong type\n          Platform.OS === 'android'\n            ? 'onTransitionProgress'\n            : // for some reason there is a difference in required event name between architectures\n            ENABLE_FABRIC\n            ? 'onTransitionProgress'\n            : 'topTransitionProgress',\n        ]\n      )}\n      {...rest}\n    >\n      <ReanimatedTransitionProgressContext.Provider\n        value={{\n          progress: progress,\n          closing: closing,\n          goingForward: goingForward,\n        }}\n      >\n        {children}\n      </ReanimatedTransitionProgressContext.Provider>\n    </AnimatedScreen>\n  );\n});\n\nReanimatedNativeStackScreen.displayName = 'ReanimatedNativeStackScreen';\n\nexport default ReanimatedNativeStackScreen;\n"],"mappings":";;;;;;AAAA;AACA;AACA;AAOA;AACA;AAAwF;AAAA;AAAA;AAAA;AAAA;AAExF,MAAMA,cAAc,GAAGC,8BAAQ,CAACC,uBAAuB,CACrDC,+BAAW,CACZ;;AAED;AACA;AACA;AACA,MAAMC,aAAa,GAAG,CAAC,aAACC,MAAM,oCAAN,QAAQC,UAAU;AAE1C,MAAMC,2BAA2B,gBAAGC,cAAK,CAACC,UAAU,CAGlD,CAACC,KAAK,EAAEC,GAAG,KAAK;EAChB,MAAM;IAAEC,QAAQ;IAAE,GAAGC;EAAK,CAAC,GAAGH,KAAK;EAEnC,MAAMI,QAAQ,GAAG,IAAAC,qCAAc,EAAC,CAAC,CAAC;EAClC,MAAMC,OAAO,GAAG,IAAAD,qCAAc,EAAC,CAAC,CAAC;EACjC,MAAME,YAAY,GAAG,IAAAF,qCAAc,EAAC,CAAC,CAAC;EAEtC,oBACE,6BAAC;EACC;EAAA;IACA,GAAG,EAAEJ,GAAI;IACT,8BAA8B,EAAE,IAAAO,+BAAQ,EACrCC,KAAkC,IAAK;MACtC,SAAS;;MACTL,QAAQ,CAACM,KAAK,GAAGD,KAAK,CAACL,QAAQ;MAC/BE,OAAO,CAACI,KAAK,GAAGD,KAAK,CAACH,OAAO;MAC7BC,YAAY,CAACG,KAAK,GAAGD,KAAK,CAACF,YAAY;IACzC,CAAC,EACD;IACE;IACA;IACAI,qBAAQ,CAACC,EAAE,KAAK,SAAS,GACrB,sBAAsB;IACtB;IACFlB,aAAa,GACX,sBAAsB,GACtB,uBAAuB,CAC5B;EACD,GACES,IAAI,gBAER,6BAAC,4CAAmC,CAAC,QAAQ;IAC3C,KAAK,EAAE;MACLC,QAAQ,EAAEA,QAAQ;MAClBE,OAAO,EAAEA,OAAO;MAChBC,YAAY,EAAEA;IAChB;EAAE,GAEDL,QAAQ,CACoC,CAChC;AAErB,CAAC,CAAC;AAEFL,2BAA2B,CAACgB,WAAW,GAAG,6BAA6B;AAAC,eAEzDhB,2BAA2B;AAAA"}
{"version":3,"names":["REMOVE_ACTION","isAndroid","Platform","OS","didWarn","renderComponentOrThunk","componentOrThunk","props","removeScene","route","dismissCount","navigation","dispatch","type","immediate","key","onAppear","descriptor","options","StackActions","completeTransition","toChildKey","state","onFinishTransitioning","routes","lastRoute","length","renderHeaderConfig","index","navigationConfig","headerMode","backButtonInCustomView","direction","disableBackButtonMenu","headerBackTitle","headerBackTitleStyle","headerBackTitleVisible","headerHideBackButton","headerHideShadow","headerLargeStyle","headerLargeTitle","headerLargeTitleHideShadow","headerLargeTitleStyle","headerShown","headerStyle","headerTintColor","headerTitleStyle","headerTopInsetEnabled","headerTranslucent","hideShadow","largeTitle","largeTitleHideShadow","title","translucent","scene","headerOptions","backTitle","backTitleFontFamily","fontFamily","backTitleFontSize","fontSize","color","topInsetEnabled","hideBackButton","largeTitleBackgroundColor","backgroundColor","largeTitleColor","largeTitleFontFamily","largeTitleFontSize","largeTitleFontWeight","fontWeight","titleColor","titleFontFamily","titleFontSize","titleFontWeight","hasHeader","header","undefined","blurEffect","children","backButtonImage","push","searchBar","headerLeft","headerBackImage","goBack","requestAnimationFrame","headerPressColorAndroid","backButtonTitle","truncatedBackButtonTitle","backTitleVisible","layoutPreset","headerTitle","headerRight","MaybeNestedStack","isHeaderInModal","screenProps","SceneComponent","Screen","React","useContext","ScreenContext","styles","scenes","StyleSheet","absoluteFill","StackView","descriptors","map","getComponent","routeNavigationProp","mode","transparentCard","stackPresentation","cardTransparent","stackAnimation","animationEnabled","console","warn","isHeaderInPush","cardStyle","customAnimationOnSwipe","replaceAnimation","gestureEnabled","nativeBackButtonDismissalEnabled","fullScreenSwipeEnabled","screenOrientation","statusBarAnimation","statusBarColor","statusBarHidden","statusBarStyle","statusBarTranslucent","onWillAppear","onWillDisappear","onDisappear","e","nativeEvent","create","flex","createStackNavigator","routeConfigMap","stackConfig","router","StackRouter","superGetStateForAction","getStateForAction","action","backRouteIndex","backRoute","find","indexOf","newRoutes","splice","isTransitioning","createNavigator"],"sources":["createNativeStackNavigator.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Platform,\n  StyleSheet,\n  Animated,\n  StyleProp,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\nimport {\n  ScreenContext,\n  ScreenStack,\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderConfig,\n  ScreenStackHeaderConfigProps,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderSearchBarView,\n  SearchBar,\n  StackPresentationTypes,\n} from 'react-native-screens';\nimport {\n  createNavigator,\n  SceneView,\n  StackActions,\n  StackRouter,\n  NavigationRouteConfigMap,\n  CreateNavigatorConfig,\n  NavigationStackRouterConfig,\n  NavigationParams,\n  NavigationRoute,\n  NavigationDescriptor,\n  NavigationState,\n  NavigationNavigator,\n  NavigationAction,\n  NavigationProp,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { NativeStackNavigationOptions as NativeStackNavigationOptionsV5 } from './native-stack/types';\nimport { HeaderBackButton } from 'react-navigation-stack';\nimport {\n  StackNavigationHelpers,\n  StackNavigationProp,\n  Layout,\n} from 'react-navigation-stack/src/vendor/types';\n\nconst REMOVE_ACTION = 'NativeStackNavigator/REMOVE';\n\nconst isAndroid = Platform.OS === 'android';\n\nlet didWarn = isAndroid;\n\nfunction renderComponentOrThunk(componentOrThunk: unknown, props: unknown) {\n  if (typeof componentOrThunk === 'function') {\n    return componentOrThunk(props);\n  }\n  return componentOrThunk;\n}\n\ntype NativeStackRemoveNavigationAction = {\n  type: typeof REMOVE_ACTION;\n  immediate: boolean;\n  dismissCount: number;\n  key?: string;\n};\n\nexport type NativeStackNavigationProp = StackNavigationProp;\n\nexport type NativeStackNavigationOptions = StackNavigatorOptions &\n  NativeStackNavigationOptionsV5 &\n  BackButtonProps & {\n    onWillAppear?: () => void;\n    onAppear?: () => void;\n    onWillDisappear?: () => void;\n    onDisappear?: () => void;\n    // these props differ from the ones used in v5 `native-stack`, and we would like to keep the API consistent between versions\n    /** Use `headerHideShadow` to be consistent with v5 `native-stack` */\n    hideShadow?: boolean;\n    /** Use `headerLargeTitle` to be consistent with v5 `native-stack` */\n    largeTitle?: boolean;\n    /** Use `headerLargeTitleHideShadow` to be consistent with v5 `native-stack` */\n    largeTitleHideShadow?: boolean;\n    /** Use `headerTranslucent` to be consistent with v5 `native-stack` */\n    translucent?: boolean;\n  };\n\n// these are adopted from `stack` navigator\ntype StackNavigatorOptions = {\n  /** This is an option from `stackNavigator` and it hides the header when set to `null`. Use `headerShown` instead to be consistent with v5 `native-stack`. */\n  header?: React.ComponentType<Record<string, unknown>> | null;\n  /** This is an option from `stackNavigator` and it controls the stack presentation along with `mode` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  cardTransparent?: boolean;\n  /** This is an option from `stackNavigator` and it sets stack animation to none when `false` passed. Use `stackAnimation: 'none'` instead to be consistent with v5 `native-stack` */\n  animationEnabled?: boolean;\n  cardStyle?: StyleProp<ViewStyle>;\n};\n\n// these are the props used for rendering back button taken from `react-navigation-stack`\ntype BackButtonProps = {\n  headerBackImage?: (props: { tintColor: string }) => React.ReactNode;\n  headerPressColorAndroid?: string;\n  headerTintColor?: string;\n  backButtonTitle?: string;\n  truncatedBackButtonTitle?: string;\n  backTitleVisible?: boolean;\n  headerBackTitleStyle?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n  layoutPreset?: Layout;\n};\n\ntype NativeStackDescriptor = NavigationDescriptor<\n  NavigationParams,\n  NativeStackNavigationOptions\n>;\n\ntype NativeStackDescriptorMap = {\n  [key: string]: NativeStackDescriptor;\n};\n\n// these are the props used for rendering back button taken from `react-navigation-stack`\ntype NativeStackNavigationConfig = {\n  /** This is an option from `stackNavigator` and controls the stack presentation along with `cardTransparent` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  mode?: 'modal' | 'containedModal';\n  /** This is an option from `stackNavigator` and makes the header hide when set to `none`. Use `headerShown` instead to be consistent with v5 `native-stack` */\n  headerMode?: 'none';\n  /** This is an option from `stackNavigator` and controls the stack presentation along with `mode` prop. Use `stackPresentation` instead to be consistent with v5 `native-stack` */\n  transparentCard?: boolean;\n};\n\nfunction removeScene(\n  route: NavigationRoute<NavigationParams>,\n  dismissCount: number,\n  navigation: StackNavigationHelpers\n) {\n  navigation.dispatch({\n    // @ts-ignore special navigation action for native stack\n    type: REMOVE_ACTION,\n    immediate: true,\n    key: route.key,\n    dismissCount,\n  });\n}\n\nfunction onAppear(\n  route: NavigationRoute<NavigationParams>,\n  descriptor: NativeStackDescriptor,\n  navigation: StackNavigationHelpers\n) {\n  descriptor.options?.onAppear?.();\n  navigation.dispatch(\n    StackActions.completeTransition({\n      toChildKey: route.key,\n      key: navigation.state.key,\n    })\n  );\n}\n\nfunction onFinishTransitioning(navigation: StackNavigationHelpers) {\n  const { routes } = navigation.state;\n  const lastRoute = routes?.length && routes[routes.length - 1];\n\n  if (lastRoute) {\n    navigation.dispatch(\n      StackActions.completeTransition({\n        toChildKey: lastRoute.key,\n        key: navigation.state.key,\n      })\n    );\n  }\n}\n\nfunction renderHeaderConfig(\n  index: number,\n  route: NavigationRoute<NavigationParams>,\n  descriptor: NativeStackDescriptor,\n  navigationConfig: NativeStackNavigationConfig\n) {\n  const { options } = descriptor;\n  const { headerMode } = navigationConfig;\n\n  const {\n    backButtonInCustomView,\n    direction,\n    disableBackButtonMenu,\n    headerBackTitle,\n    headerBackTitleStyle,\n    headerBackTitleVisible,\n    headerHideBackButton,\n    headerHideShadow,\n    headerLargeStyle,\n    headerLargeTitle,\n    headerLargeTitleHideShadow,\n    headerLargeTitleStyle,\n    headerShown,\n    headerStyle,\n    headerTintColor,\n    headerTitleStyle,\n    headerTopInsetEnabled = true,\n    headerTranslucent,\n    hideShadow,\n    largeTitle,\n    largeTitleHideShadow,\n    title,\n    translucent,\n  } = options;\n\n  const scene = {\n    index,\n    key: route.key,\n    route,\n    descriptor,\n  };\n\n  const headerOptions: ScreenStackHeaderConfigProps = {\n    backButtonInCustomView,\n    backTitle: headerBackTitleVisible === false ? '' : headerBackTitle,\n    backTitleFontFamily: headerBackTitleStyle?.fontFamily,\n    backTitleFontSize: headerBackTitleStyle?.fontSize,\n    color: headerTintColor,\n    direction,\n    disableBackButtonMenu,\n    topInsetEnabled: headerTopInsetEnabled,\n    hideBackButton: headerHideBackButton,\n    hideShadow: headerHideShadow || hideShadow,\n    largeTitle: headerLargeTitle || largeTitle,\n    largeTitleBackgroundColor:\n      headerLargeStyle?.backgroundColor ||\n      // @ts-ignore old implementation, will not be present in TS API, but can be used here\n      headerLargeTitleStyle?.backgroundColor,\n    largeTitleColor: headerLargeTitleStyle?.color,\n    largeTitleFontFamily: headerLargeTitleStyle?.fontFamily,\n    largeTitleFontSize: headerLargeTitleStyle?.fontSize,\n    largeTitleFontWeight: headerLargeTitleStyle?.fontWeight,\n    largeTitleHideShadow: largeTitleHideShadow || headerLargeTitleHideShadow,\n    title,\n    titleColor: headerTitleStyle?.color || headerTintColor,\n    titleFontFamily: headerTitleStyle?.fontFamily,\n    titleFontSize: headerTitleStyle?.fontSize,\n    titleFontWeight: headerTitleStyle?.fontWeight,\n    translucent: headerTranslucent || translucent || false,\n  };\n\n  const hasHeader =\n    headerShown !== false && headerMode !== 'none' && options.header !== null;\n  if (!hasHeader) {\n    return <ScreenStackHeaderConfig {...headerOptions} hidden />;\n  }\n\n  if (headerStyle !== undefined) {\n    headerOptions.backgroundColor = headerStyle.backgroundColor;\n    headerOptions.blurEffect = headerStyle.blurEffect;\n  }\n\n  const children = [];\n\n  if (options.backButtonImage) {\n    children.push(\n      <ScreenStackHeaderBackButtonImage\n        key=\"backImage\"\n        source={options.backButtonImage}\n      />\n    );\n  }\n\n  if (Platform.OS === 'ios' && options.searchBar) {\n    children.push(\n      <ScreenStackHeaderSearchBarView>\n        <SearchBar {...options.searchBar} />\n      </ScreenStackHeaderSearchBarView>\n    );\n  }\n\n  if (options.headerLeft !== undefined) {\n    children.push(\n      <ScreenStackHeaderLeftView key=\"left\">\n        {renderComponentOrThunk(options.headerLeft, { scene })}\n      </ScreenStackHeaderLeftView>\n    );\n  } else if (options.headerBackImage !== undefined) {\n    const goBack = () => {\n      // Go back on next tick because button ripple effect needs to happen on Android\n      requestAnimationFrame(() => {\n        descriptor.navigation.goBack(descriptor.key);\n      });\n    };\n\n    children.push(\n      <ScreenStackHeaderLeftView key=\"left\">\n        <HeaderBackButton\n          onPress={goBack}\n          pressColorAndroid={options.headerPressColorAndroid}\n          tintColor={options.headerTintColor}\n          backImage={options.headerBackImage}\n          label={options.backButtonTitle}\n          truncatedLabel={options.truncatedBackButtonTitle}\n          labelVisible={options.backTitleVisible}\n          labelStyle={options.headerBackTitleStyle}\n          titleLayout={options.layoutPreset}\n          // @ts-ignore old props kept for very old version of `react-navigation-stack`\n          title={options.backButtonTitle}\n          truncatedTitle={options.truncatedBackButtonTitle}\n          backTitleVisible={options.backTitleVisible}\n          titleStyle={options.headerBackTitleStyle}\n          layoutPreset={options.layoutPreset}\n          scene={scene}\n        />\n      </ScreenStackHeaderLeftView>\n    );\n  }\n\n  if (options.headerTitle) {\n    if (title === undefined && typeof options.headerTitle === 'string') {\n      headerOptions.title = options.headerTitle;\n    } else {\n      children.push(\n        <ScreenStackHeaderCenterView key=\"center\">\n          {renderComponentOrThunk(options.headerTitle, { scene })}\n        </ScreenStackHeaderCenterView>\n      );\n    }\n  }\n\n  if (options.headerRight) {\n    children.push(\n      <ScreenStackHeaderRightView key=\"right\">\n        {renderComponentOrThunk(options.headerRight, { scene })}\n      </ScreenStackHeaderRightView>\n    );\n  }\n\n  if (children.length > 0) {\n    headerOptions.children = children;\n  }\n\n  return <ScreenStackHeaderConfig {...headerOptions} />;\n}\n\nconst MaybeNestedStack = ({\n  isHeaderInModal,\n  screenProps,\n  route,\n  navigation,\n  SceneComponent,\n  index,\n  descriptor,\n  navigationConfig,\n}: {\n  isHeaderInModal: boolean;\n  screenProps: unknown;\n  route: NavigationRoute<NavigationParams>;\n  navigation: NavigationScreenProp<\n    NavigationRoute<NavigationParams>,\n    NavigationParams\n  >;\n  SceneComponent: React.ComponentType<Record<string, unknown>>;\n  index: number;\n  descriptor: NativeStackDescriptor;\n  navigationConfig: NativeStackNavigationConfig;\n}) => {\n  const Screen = React.useContext(ScreenContext);\n\n  if (isHeaderInModal) {\n    return (\n      <ScreenStack style={styles.scenes}>\n        <Screen style={StyleSheet.absoluteFill} enabled isNativeStack>\n          {renderHeaderConfig(index, route, descriptor, navigationConfig)}\n          <SceneView\n            screenProps={screenProps}\n            navigation={navigation}\n            component={SceneComponent}\n          />\n        </Screen>\n      </ScreenStack>\n    );\n  }\n  return (\n    <SceneView\n      screenProps={screenProps}\n      navigation={navigation}\n      component={SceneComponent}\n    />\n  );\n};\n\ntype StackViewProps = {\n  navigation: StackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n  navigationConfig: NativeStackNavigationConfig;\n  screenProps: unknown;\n};\n\nfunction StackView({\n  navigation,\n  descriptors,\n  navigationConfig,\n  screenProps,\n}: StackViewProps) {\n  const { routes } = navigation.state;\n  const Screen = React.useContext(ScreenContext);\n  return (\n    <ScreenStack\n      style={styles.scenes}\n      onFinishTransitioning={() => onFinishTransitioning(navigation)}\n    >\n      {routes.map((route, index) => {\n        const descriptor = descriptors[route.key];\n        const { getComponent, options } = descriptor;\n        const routeNavigationProp = descriptor.navigation;\n        const { mode, transparentCard } = navigationConfig;\n        const SceneComponent = getComponent();\n\n        let stackPresentation: StackPresentationTypes = 'push';\n\n        if (options.stackPresentation) {\n          stackPresentation = options.stackPresentation;\n        } else {\n          // this shouldn't be used because we have a prop for that\n          if (mode === 'modal' || mode === 'containedModal') {\n            stackPresentation = mode;\n            if (transparentCard || options.cardTransparent) {\n              stackPresentation =\n                mode === 'containedModal'\n                  ? 'containedTransparentModal'\n                  : 'transparentModal';\n            }\n          }\n        }\n        let stackAnimation = options.stackAnimation;\n        if (options.animationEnabled === false) {\n          stackAnimation = 'none';\n        }\n\n        const hasHeader =\n          options.headerShown !== false &&\n          navigationConfig?.headerMode !== 'none' &&\n          options.header !== null;\n\n        if (\n          !didWarn &&\n          stackPresentation !== 'push' &&\n          options.headerShown !== undefined\n        ) {\n          didWarn = true;\n          console.warn(\n            'Be aware that changing the visibility of header in modal on iOS will result in resetting the state of the screen.'\n          );\n        }\n\n        const isHeaderInModal = isAndroid\n          ? false\n          : stackPresentation !== 'push' &&\n            hasHeader &&\n            options.headerShown === true;\n        const isHeaderInPush = isAndroid\n          ? hasHeader\n          : stackPresentation === 'push' && hasHeader;\n\n        return (\n          <Screen\n            key={`screen_${route.key}`}\n            enabled\n            isNativeStack\n            style={[StyleSheet.absoluteFill, options.cardStyle]}\n            stackAnimation={stackAnimation}\n            customAnimationOnSwipe={options.customAnimationOnSwipe}\n            stackPresentation={stackPresentation}\n            replaceAnimation={\n              options.replaceAnimation === undefined\n                ? 'pop'\n                : options.replaceAnimation\n            }\n            pointerEvents={\n              index === navigation.state.routes.length - 1 ? 'auto' : 'none'\n            }\n            gestureEnabled={\n              Platform.OS === 'android'\n                ? false\n                : options.gestureEnabled === undefined\n                ? true\n                : options.gestureEnabled\n            }\n            nativeBackButtonDismissalEnabled={\n              options.nativeBackButtonDismissalEnabled\n            }\n            fullScreenSwipeEnabled={options.fullScreenSwipeEnabled}\n            screenOrientation={options.screenOrientation}\n            statusBarAnimation={options.statusBarAnimation}\n            statusBarColor={options.statusBarColor}\n            statusBarHidden={options.statusBarHidden}\n            statusBarStyle={options.statusBarStyle}\n            statusBarTranslucent={options.statusBarTranslucent}\n            onAppear={() => onAppear(route, descriptor, routeNavigationProp)}\n            onWillAppear={() => options?.onWillAppear?.()}\n            onWillDisappear={() => options?.onWillDisappear?.()}\n            onDisappear={() => options?.onDisappear?.()}\n            onHeaderBackButtonClicked={() =>\n              removeScene(route, 1, routeNavigationProp)\n            }\n            onDismissed={(e) =>\n              removeScene(\n                route,\n                e.nativeEvent.dismissCount,\n                routeNavigationProp\n              )\n            }\n          >\n            {isHeaderInPush &&\n              renderHeaderConfig(index, route, descriptor, navigationConfig)}\n            <MaybeNestedStack\n              isHeaderInModal={isHeaderInModal}\n              screenProps={screenProps}\n              route={route}\n              navigation={routeNavigationProp}\n              SceneComponent={SceneComponent}\n              index={index}\n              descriptor={descriptor}\n              navigationConfig={navigationConfig}\n            />\n          </Screen>\n        );\n      })}\n    </ScreenStack>\n  );\n}\n\nconst styles = StyleSheet.create({\n  scenes: { flex: 1 },\n});\n\nfunction createStackNavigator(\n  routeConfigMap: NavigationRouteConfigMap<\n    NativeStackNavigationOptions,\n    StackNavigationProp\n  >,\n  stackConfig: CreateNavigatorConfig<\n    NativeStackNavigationConfig,\n    NavigationStackRouterConfig,\n    NativeStackNavigationOptions,\n    StackNavigationProp\n  > = {}\n): NavigationNavigator<\n  Record<string, unknown>,\n  NavigationProp<NavigationState>\n> {\n  const router = StackRouter(routeConfigMap, stackConfig);\n\n  // below we override getStateForAction method in order to add handling for\n  // a custom native stack navigation action. The action REMOVE that we want to\n  // add works in a similar way to POP, but it does not remove all the routes\n  // that sit on top of the removed route. For example if we have three routes\n  // [a,b,c] and call POP on b, then both b and c will go away. In case we\n  // call REMOVE on b, only b will be removed from the stack and the resulting\n  // state will be [a, c]\n  const superGetStateForAction = router.getStateForAction;\n  router.getStateForAction = (\n    action: NavigationAction | NativeStackRemoveNavigationAction,\n    state\n  ) => {\n    if (action.type === REMOVE_ACTION) {\n      const { key, immediate, dismissCount } = action;\n      let backRouteIndex = state.index;\n      if (key) {\n        const backRoute = state.routes.find(\n          (route: NavigationRoute<NavigationParams>) => route.key === key\n        );\n        backRouteIndex = state.routes.indexOf(backRoute);\n      }\n\n      if (backRouteIndex > 0) {\n        const newRoutes = [...state.routes];\n        if (dismissCount > 1) {\n          // when dismissing with iOS 14 native header back button, we can pop more than 1 screen at a time\n          // and the `backRouteIndex` is the index of the previous screen. Since we are starting already\n          // on the previous screen, we add 1 to start.\n          newRoutes.splice(backRouteIndex - dismissCount + 1, dismissCount);\n        } else {\n          newRoutes.splice(backRouteIndex, 1);\n        }\n\n        return {\n          ...state,\n          routes: newRoutes,\n          index: newRoutes.length - 1,\n          isTransitioning: immediate !== true,\n        };\n      }\n    }\n    return superGetStateForAction(action as NavigationAction, state);\n  };\n  // Create a navigator with StackView as the view\n  return createNavigator(StackView, router, stackConfig);\n}\n\nexport default createStackNavigator;\n"],"mappings":"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"}
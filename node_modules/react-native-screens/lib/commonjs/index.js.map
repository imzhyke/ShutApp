{"version":3,"names":["ENABLE_SCREENS","enableScreens","shouldEnableScreens","screensEnabled","enableFreeze","shouldEnableReactFreeze","NativeScreen","React","Component","render","active","activityState","style","enabled","rest","props","undefined","display","Screen","Animated","createAnimatedComponent","InnerScreen","View","ScreenContext","createContext","ScreenContainer","NativeScreenContainer","NativeScreenNavigationContainer","ScreenStack","FullWindowOverlay","ScreenStackHeaderBackButtonImage","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenStackHeaderConfig","SearchBar","ScreenStackHeaderSubview","shouldUseActivityState"],"sources":["index.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\nimport { Animated, View, ViewProps, ImageProps, Image } from 'react-native';\nimport {\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  HeaderSubviewTypes,\n  SearchBarProps,\n} from './types';\n\nexport * from './types';\nexport { default as useTransitionProgress } from './useTransitionProgress';\nexport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\nlet ENABLE_SCREENS = true;\n\nexport function enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = shouldEnableScreens;\n}\n\nexport function screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// @ts-ignore function stub, freezing logic is located in index.native.tsx\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function enableFreeze(shouldEnableReactFreeze = true): void {\n  // noop\n}\n\nexport class NativeScreen extends React.Component<ScreenProps> {\n  render(): JSX.Element {\n    let {\n      active,\n      activityState,\n      style,\n      enabled = ENABLE_SCREENS,\n      ...rest\n    } = this.props;\n\n    if (enabled) {\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0; // change taken from index.native.tsx\n      }\n      return (\n        <View\n          // @ts-expect-error: hidden exists on web, but not in React Native\n          hidden={activityState === 0}\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          {...rest}\n        />\n      );\n    }\n\n    return <View {...rest} />;\n  }\n}\n\nexport const Screen = Animated.createAnimatedComponent(NativeScreen);\n\nexport const InnerScreen = View;\n\nexport const ScreenContext = React.createContext(Screen);\n\nexport const ScreenContainer: React.ComponentType<ScreenContainerProps> = View;\n\nexport const NativeScreenContainer: React.ComponentType<ScreenContainerProps> =\n  View;\n\nexport const NativeScreenNavigationContainer: React.ComponentType<ScreenContainerProps> =\n  View;\n\nexport const ScreenStack: React.ComponentType<ScreenStackProps> = View;\n\nexport const FullWindowOverlay = View as React.ComponentType<{\n  children: ReactNode;\n}>;\n\nexport const ScreenStackHeaderBackButtonImage = (\n  props: ImageProps\n): JSX.Element => (\n  <View>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </View>\n);\n\nexport const ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => <View {...props} />;\n\nexport const ScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps> =\n  View;\n\n// @ts-expect-error: search bar props have no common props with View\nexport const SearchBar: React.ComponentType<SearchBarProps> = View;\n\nexport const ScreenStackHeaderSubview: React.ComponentType<\n  React.PropsWithChildren<ViewProps & { type?: HeaderSubviewTypes }>\n> = View;\n\nexport const shouldUseActivityState = true;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAUA;AAAA;EAAA;EAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;EAAA;AAAA;AACA;AACA;AAGiB;AAAA;AAEjB,IAAIA,cAAc,GAAG,IAAI;AAElB,SAASC,aAAa,GAAmC;EAAA,IAAlCC,mBAAmB,uEAAG,IAAI;EACtDF,cAAc,GAAGE,mBAAmB;AACtC;AAEO,SAASC,cAAc,GAAY;EACxC,OAAOH,cAAc;AACvB;;AAEA;AACA;AACO,SAASI,YAAY,GAAuC;EAAA,IAAtCC,uBAAuB,uEAAG,IAAI;AAE3D,CAAC,CADC;;AAGK,MAAMC,YAAY,SAASC,cAAK,CAACC,SAAS,CAAc;EAC7DC,MAAM,GAAgB;IACpB,IAAI;MACFC,MAAM;MACNC,aAAa;MACbC,KAAK;MACLC,OAAO,GAAGb,cAAc;MACxB,GAAGc;IACL,CAAC,GAAG,IAAI,CAACC,KAAK;IAEd,IAAIF,OAAO,EAAE;MACX,IAAIH,MAAM,KAAKM,SAAS,IAAIL,aAAa,KAAKK,SAAS,EAAE;QACvDL,aAAa,GAAGD,MAAM,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MACxC;;MACA,oBACE,6BAAC;MACC;MAAA;QACA,MAAM,EAAEC,aAAa,KAAK,CAAE;QAC5B,KAAK,EAAE,CAACC,KAAK,EAAE;UAAEK,OAAO,EAAEN,aAAa,KAAK,CAAC,GAAG,MAAM,GAAG;QAAO,CAAC;MAAE,GAC/DG,IAAI,EACR;IAEN;IAEA,oBAAO,6BAAC,iBAAI,EAAKA,IAAI,CAAI;EAC3B;AACF;AAAC;AAEM,MAAMI,MAAM,GAAGC,qBAAQ,CAACC,uBAAuB,CAACd,YAAY,CAAC;AAAC;AAE9D,MAAMe,WAAW,GAAGC,iBAAI;AAAC;AAEzB,MAAMC,aAAa,gBAAGhB,cAAK,CAACiB,aAAa,CAACN,MAAM,CAAC;AAAC;AAElD,MAAMO,eAA0D,GAAGH,iBAAI;AAAC;AAExE,MAAMI,qBAAgE,GAC3EJ,iBAAI;AAAC;AAEA,MAAMK,+BAA0E,GACrFL,iBAAI;AAAC;AAEA,MAAMM,WAAkD,GAAGN,iBAAI;AAAC;AAEhE,MAAMO,iBAAiB,GAAGP,iBAE/B;AAAC;AAEI,MAAMQ,gCAAgC,GAC3Cf,KAAiB,iBAEjB,6BAAC,iBAAI,qBACH,6BAAC,kBAAK;EAAC,UAAU,EAAC,QAAQ;EAAC,YAAY,EAAE;AAAE,GAAKA,KAAK,EAAI,CAE5D;AAAC;AAEK,MAAMgB,0BAA0B,GACrChB,KAAyC,iBACzB,6BAAC,iBAAI,EAAKA,KAAK,CAAI;AAAC;AAE/B,MAAMiB,yBAAyB,GACpCjB,KAAyC,iBACzB,6BAAC,iBAAI,EAAKA,KAAK,CAAI;AAAC;AAE/B,MAAMkB,2BAA2B,GACtClB,KAAyC,iBACzB,6BAAC,iBAAI,EAAKA,KAAK,CAAI;AAAC;AAE/B,MAAMmB,8BAA8B,GACzCnB,KAA8C,iBAC9B,6BAAC,iBAAI,EAAKA,KAAK,CAAI;AAAC;AAE/B,MAAMoB,uBAA0E,GACrFb,iBAAI;;AAEN;AAAA;AACO,MAAMc,SAA8C,GAAGd,iBAAI;AAAC;AAE5D,MAAMe,wBAEZ,GAAGf,iBAAI;AAAC;AAEF,MAAMgB,sBAAsB,GAAG,IAAI;AAAC"}
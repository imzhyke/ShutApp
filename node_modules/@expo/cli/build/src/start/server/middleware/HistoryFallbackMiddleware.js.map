{"version":3,"sources":["../../../../../src/start/server/middleware/HistoryFallbackMiddleware.ts"],"sourcesContent":["import { parsePlatformHeader } from './resolvePlatform';\nimport { ServerNext, ServerRequest, ServerResponse } from './server.types';\n\nconst debug = require('debug')('expo:start:server:metro:historyFallback') as typeof console.log;\n\nconst WS_DEVICE_URL = '/inspector/device';\nconst WS_DEBUGGER_URL = '/inspector/debug';\nconst PAGES_LIST_JSON_URL = '/json';\nconst PAGES_LIST_JSON_URL_2 = '/json/list';\nconst PAGES_LIST_JSON_VERSION_URL = '/json/version';\n\nexport function isInspectorProxyRequest(req: ServerRequest) {\n  const ua = req.headers['user-agent'];\n  const url = req.url;\n\n  // This check is very fragile but it enables websites to use any of the\n  // endpoints below without triggering the inspector proxy.\n  if (!url || (ua && !ua.includes('node-fetch'))) {\n    // This optimizes for the inspector working over the endpoint being available on web.\n    // Web is less fragile.\n    return false;\n  }\n\n  return [\n    WS_DEVICE_URL,\n    WS_DEBUGGER_URL,\n    PAGES_LIST_JSON_URL,\n    PAGES_LIST_JSON_URL_2,\n    PAGES_LIST_JSON_VERSION_URL,\n  ].includes(url);\n}\n\n/**\n * Create a web-only middleware which redirects to the index middleware without losing the path component.\n * This is useful for things like React Navigation which need to render the index.html and then direct the user in-memory.\n */\nexport class HistoryFallbackMiddleware {\n  constructor(\n    private indexMiddleware: (\n      req: ServerRequest,\n      res: ServerResponse,\n      next: ServerNext\n    ) => Promise<void>\n  ) {}\n  getHandler() {\n    return (req: ServerRequest, res: ServerResponse, next: any) => {\n      const platform = parsePlatformHeader(req);\n\n      if (!platform || platform === 'web') {\n        if (isInspectorProxyRequest(req)) {\n          debug('Inspector proxy request:', req.url, 'UA:', req.headers['user-agent']);\n          return next();\n        }\n        // Redirect unknown to the manifest handler while preserving the path.\n        // This implements the HTML5 history fallback API.\n        return this.indexMiddleware(req, res, next);\n      }\n\n      return next();\n    };\n  }\n}\n"],"names":["isInspectorProxyRequest","debug","require","WS_DEVICE_URL","WS_DEBUGGER_URL","PAGES_LIST_JSON_URL","PAGES_LIST_JSON_URL_2","PAGES_LIST_JSON_VERSION_URL","req","ua","headers","url","includes","HistoryFallbackMiddleware","constructor","indexMiddleware","getHandler","res","next","platform","parsePlatformHeader"],"mappings":"AAAA;;;;QAWgBA,uBAAuB,GAAvBA,uBAAuB;AAXH,IAAA,gBAAmB,WAAnB,mBAAmB,CAAA;AAGvD,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,yCAAyC,CAAC,AAAsB,AAAC;AAEhG,MAAMC,aAAa,GAAG,mBAAmB,AAAC;AAC1C,MAAMC,eAAe,GAAG,kBAAkB,AAAC;AAC3C,MAAMC,mBAAmB,GAAG,OAAO,AAAC;AACpC,MAAMC,qBAAqB,GAAG,YAAY,AAAC;AAC3C,MAAMC,2BAA2B,GAAG,eAAe,AAAC;AAE7C,SAASP,uBAAuB,CAACQ,GAAkB,EAAE;IAC1D,MAAMC,EAAE,GAAGD,GAAG,CAACE,OAAO,CAAC,YAAY,CAAC,AAAC;IACrC,MAAMC,GAAG,GAAGH,GAAG,CAACG,GAAG,AAAC;IAEpB,uEAAuE;IACvE,0DAA0D;IAC1D,IAAI,CAACA,GAAG,IAAKF,EAAE,IAAI,CAACA,EAAE,CAACG,QAAQ,CAAC,YAAY,CAAC,AAAC,EAAE;QAC9C,qFAAqF;QACrF,uBAAuB;QACvB,OAAO,KAAK,CAAC;KACd;IAED,OAAO;QACLT,aAAa;QACbC,eAAe;QACfC,mBAAmB;QACnBC,qBAAqB;QACrBC,2BAA2B;KAC5B,CAACK,QAAQ,CAACD,GAAG,CAAC,CAAC;CACjB;AAMM,MAAME,yBAAyB;IACpCC,YACUC,eAIU,CAClB;aALQA,eAIU,GAJVA,eAIU;KAChB;IACJC,UAAU,GAAG;QACX,OAAO,CAACR,GAAkB,EAAES,GAAmB,EAAEC,IAAS,GAAK;YAC7D,MAAMC,QAAQ,GAAGC,CAAAA,GAAAA,gBAAmB,AAAK,CAAA,oBAAL,CAACZ,GAAG,CAAC,AAAC;YAE1C,IAAI,CAACW,QAAQ,IAAIA,QAAQ,KAAK,KAAK,EAAE;gBACnC,IAAInB,uBAAuB,CAACQ,GAAG,CAAC,EAAE;oBAChCP,KAAK,CAAC,0BAA0B,EAAEO,GAAG,CAACG,GAAG,EAAE,KAAK,EAAEH,GAAG,CAACE,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;oBAC7E,OAAOQ,IAAI,EAAE,CAAC;iBACf;gBACD,sEAAsE;gBACtE,kDAAkD;gBAClD,OAAO,IAAI,CAACH,eAAe,CAACP,GAAG,EAAES,GAAG,EAAEC,IAAI,CAAC,CAAC;aAC7C;YAED,OAAOA,IAAI,EAAE,CAAC;SACf,CAAC;KACH;CACF;QAzBYL,yBAAyB,GAAzBA,yBAAyB"}
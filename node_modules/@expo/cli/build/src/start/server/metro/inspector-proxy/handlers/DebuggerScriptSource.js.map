{"version":3,"sources":["../../../../../../../src/start/server/metro/inspector-proxy/handlers/DebuggerScriptSource.ts"],"sourcesContent":["import type { Protocol } from 'devtools-protocol';\nimport fs from 'fs';\nimport type { DebuggerInfo, Device as MetroDevice } from 'metro-inspector-proxy';\nimport fetch from 'node-fetch';\nimport path from 'path';\nimport type WS from 'ws';\n\nimport { CdpMessage, DebuggerRequest, DebuggerResponse, InspectorHandler } from './types';\n\n// TODO(cedric): remove this custom handler when fully switching over to `metro@>=0.75.1`\nexport class DebuggerScriptSourceHandler implements InspectorHandler {\n  constructor(private readonly device: MetroDevice) {}\n\n  onDebuggerMessage(\n    message: DebuggerRequest<DebuggerGetScriptSource>,\n    { socket }: Pick<DebuggerInfo, 'socket'>\n  ) {\n    // See: https://github.com/facebook/metro/blob/65d801cb60c06c1b17f428ca79491db73c53ef87/packages/metro-inspector-proxy/src/Device.js#L488-L544\n    if (message.method === 'Debugger.getScriptSource') {\n      const { scriptId } = message.params;\n      const pathOrUrl = this.device._scriptIdToSourcePathMapping.get(scriptId);\n\n      // Unkown scriptId provided, can't reply\n      if (!pathOrUrl) {\n        return false;\n      }\n\n      // Fetch the source from URL, if the path is a bundle URL\n      if (isUrl(pathOrUrl)) {\n        fetch(pathOrUrl)\n          .then((response) =>\n            response.ok\n              ? response.text()\n              : respond(socket, message, {\n                  error: `Received status ${response.status} while fetching: ${pathOrUrl}`,\n                })\n          )\n          .then((scriptSource) => {\n            if (scriptSource !== null) {\n              respond(socket, message, { scriptSource });\n            }\n          });\n\n        return true;\n      }\n\n      // Fetch the source from file directly, using the project root as starting directory\n      try {\n        const relativePath = path.resolve(this.device._projectRoot, pathOrUrl);\n        respond(socket, message, { scriptSource: fs.readFileSync(relativePath, 'utf8') });\n      } catch (error: unknown) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        respond(socket, message, {\n          error: `Failed to load \"${pathOrUrl}\": ${errorMessage}`,\n        });\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\n/** @see https://chromedevtools.github.io/devtools-protocol/v8/Debugger/#method-getScriptSource */\nexport type DebuggerGetScriptSource = CdpMessage<\n  'Debugger.getScriptSource',\n  Protocol.Debugger.GetScriptSourceRequest,\n  Protocol.Debugger.GetScriptSourceResponse\n>;\n\nfunction respond<T extends CdpMessage>(\n  socket: WS,\n  request: DebuggerRequest<T>,\n  response: DebuggerResponse<T>['result'] | { error: string }\n) {\n  if ('error' in response) {\n    socket.send(JSON.stringify({ id: request.id, error: { message: response.error } }));\n  } else {\n    socket.send(JSON.stringify({ id: request.id, result: response }));\n  }\n\n  return null;\n}\n\nfunction isUrl(pathOrUrl: string) {\n  try {\n    const url = new URL(pathOrUrl);\n    return ['http', 'https'].some((protocol) => url.protocol.toLowerCase().startsWith(protocol));\n  } catch {\n    return false;\n  }\n}\n"],"names":["DebuggerScriptSourceHandler","constructor","device","onDebuggerMessage","message","socket","method","scriptId","params","pathOrUrl","_scriptIdToSourcePathMapping","get","isUrl","fetch","then","response","ok","text","respond","error","status","scriptSource","relativePath","path","resolve","_projectRoot","fs","readFileSync","errorMessage","Error","String","request","send","JSON","stringify","id","result","url","URL","some","protocol","toLowerCase","startsWith"],"mappings":"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"}
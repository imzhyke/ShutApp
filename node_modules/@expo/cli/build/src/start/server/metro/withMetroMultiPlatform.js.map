{"version":3,"sources":["../../../../../src/start/server/metro/withMetroMultiPlatform.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport fs from 'fs';\nimport { ConfigT } from 'metro-config';\nimport { Resolution, ResolutionContext } from 'metro-resolver';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { env } from '../../../utils/env';\nimport { WebSupportProjectPrerequisite } from '../../doctor/web/WebSupportProjectPrerequisite';\nimport { PlatformBundlers } from '../platformBundlers';\nimport { importMetroResolverFromProject } from './resolveFromProject';\nimport { getAppRouterRelativeEntryPath } from './router';\nimport { withMetroResolvers } from './withMetroResolvers';\n\nfunction withWebPolyfills(config: ConfigT): ConfigT {\n  const originalGetPolyfills = config.serializer.getPolyfills\n    ? config.serializer.getPolyfills.bind(config.serializer)\n    : () => [];\n\n  const getPolyfills = (ctx: { platform: string | null | undefined }): readonly string[] => {\n    if (ctx.platform === 'web') {\n      return [\n        // TODO: runtime polyfills, i.e. Fast Refresh, error overlay, React Dev Tools...\n      ];\n    }\n    // Generally uses `rn-get-polyfills`\n    return originalGetPolyfills(ctx);\n  };\n\n  return {\n    ...config,\n    serializer: {\n      ...config.serializer,\n      getPolyfills,\n    },\n  };\n}\n\nfunction normalizeSlashes(p: string) {\n  return p.replace(/\\\\/g, '/');\n}\n\n/**\n * Apply custom resolvers to do the following:\n * - Disable `.native.js` extensions on web.\n * - Alias `react-native` to `react-native-web` on web.\n * - Redirect `react-native-web/dist/modules/AssetRegistry/index.js` to `@react-native/assets/registry.js` on web.\n */\nexport function withWebResolvers(config: ConfigT, projectRoot: string) {\n  // Get the `transformer.assetRegistryPath`\n  // this needs to be unified since you can't dynamically\n  // swap out the transformer based on platform.\n  const assetRegistryPath = fs.realpathSync(\n    // This is the native asset registry alias for native.\n    path.resolve(resolveFrom(projectRoot, 'react-native/Libraries/Image/AssetRegistry'))\n    // NOTE(EvanBacon): This is the newer import but it doesn't work in the expo/expo monorepo.\n    // path.resolve(resolveFrom(projectRoot, '@react-native/assets/registry.js'))\n  );\n\n  // Create a resolver which dynamically disables support for\n  // `*.native.*` extensions on web.\n\n  const { resolve } = importMetroResolverFromProject(projectRoot);\n\n  const extraNodeModules: { [key: string]: Record<string, string> } = {\n    web: {\n      'react-native': path.resolve(require.resolve('react-native-web/package.json'), '..'),\n    },\n  };\n\n  const aliases: { [key: string]: Record<string, string> } = {\n    web: {\n      'react-native': 'react-native-web',\n    },\n  };\n\n  const preferredMainFields: { [key: string]: string[] } = {\n    // Defaults from Expo Webpack. Most packages using `react-native` don't support web\n    // in the `react-native` field, so we should prefer the `browser` field.\n    // https://github.com/expo/router/issues/37\n    web: ['browser', 'module', 'main'],\n  };\n\n  return withMetroResolvers(config, projectRoot, [\n    // Add a resolver to alias the web asset resolver.\n    (immutableContext: ResolutionContext, moduleName: string, platform: string | null) => {\n      const context = { ...immutableContext } as ResolutionContext & { mainFields: string[] };\n\n      // Conditionally remap `react-native` to `react-native-web` on web in\n      // a way that doesn't require Babel to resolve the alias.\n      if (platform && platform in aliases && aliases[platform][moduleName]) {\n        moduleName = aliases[platform][moduleName];\n      }\n\n      // TODO: We may be able to remove this in the future, it's doing no harm\n      // by staying here.\n      // Conditionally remap `react-native` to `react-native-web`\n      if (platform && platform in extraNodeModules) {\n        context.extraNodeModules = {\n          ...extraNodeModules[platform],\n          ...context.extraNodeModules,\n        };\n      }\n\n      const mainFields = env.EXPO_METRO_NO_MAIN_FIELD_OVERRIDE\n        ? context.mainFields\n        : platform && platform in preferredMainFields\n        ? preferredMainFields[platform]\n        : context.mainFields;\n\n      const result = resolve(\n        {\n          ...context,\n          preferNativePlatform: platform !== 'web',\n          resolveRequest: undefined,\n\n          // Passing `mainFields` directly won't be considered\n          // we need to extend the `getPackageMainPath` directly to\n          // use platform specific `mainFields`.\n          getPackageMainPath(packageJsonPath) {\n            // @ts-expect-error: mainFields is not on type\n            const package_ = context.moduleCache.getPackage(packageJsonPath);\n            return package_.getMain(mainFields);\n          },\n        },\n        moduleName,\n        platform\n      );\n\n      // Replace the web resolver with the original one.\n      // This is basically an alias for web-only.\n      if (shouldAliasAssetRegistryForWeb(platform, result)) {\n        // @ts-expect-error: `readonly` for some reason.\n        result.filePath = assetRegistryPath;\n      }\n\n      return result;\n    },\n  ]);\n}\n\n/** @returns `true` if the incoming resolution should be swapped on web. */\nexport function shouldAliasAssetRegistryForWeb(\n  platform: string | null,\n  result: Resolution\n): boolean {\n  return (\n    platform === 'web' &&\n    result?.type === 'sourceFile' &&\n    typeof result?.filePath === 'string' &&\n    normalizeSlashes(result.filePath).endsWith(\n      'react-native-web/dist/modules/AssetRegistry/index.js'\n    )\n  );\n}\n\n/** Add support for `react-native-web` and the Web platform. */\nexport async function withMetroMultiPlatformAsync(\n  projectRoot: string,\n  config: ConfigT,\n  platformBundlers: PlatformBundlers\n) {\n  // Auto pick App entry: this is injected with Babel.\n  process.env.EXPO_ROUTER_APP_ROOT = getAppRouterRelativeEntryPath(projectRoot);\n  process.env.EXPO_PROJECT_ROOT = process.env.EXPO_PROJECT_ROOT ?? projectRoot;\n\n  if (platformBundlers.web === 'metro') {\n    await new WebSupportProjectPrerequisite(projectRoot).assertAsync();\n  } else {\n    // Bail out early for performance enhancements if web is not enabled.\n    return config;\n  }\n\n  return withMetroMultiPlatform(projectRoot, config, platformBundlers);\n}\n\nfunction withMetroMultiPlatform(\n  projectRoot: string,\n  config: ConfigT,\n  platformBundlers: PlatformBundlers\n) {\n  let expoConfigPlatforms = Object.entries(platformBundlers)\n    .filter(([, bundler]) => bundler === 'metro')\n    .map(([platform]) => platform);\n\n  if (Array.isArray(config.resolver.platforms)) {\n    expoConfigPlatforms = [...new Set(expoConfigPlatforms.concat(config.resolver.platforms))];\n  }\n\n  // @ts-expect-error: typed as `readonly`.\n  config.resolver.platforms = expoConfigPlatforms;\n\n  config = withWebPolyfills(config);\n\n  return withWebResolvers(config, projectRoot);\n}\n"],"names":["withWebResolvers","shouldAliasAssetRegistryForWeb","withMetroMultiPlatformAsync","withWebPolyfills","config","originalGetPolyfills","serializer","getPolyfills","bind","ctx","platform","normalizeSlashes","p","replace","projectRoot","assetRegistryPath","fs","realpathSync","path","resolve","resolveFrom","importMetroResolverFromProject","extraNodeModules","web","require","aliases","preferredMainFields","withMetroResolvers","immutableContext","moduleName","context","mainFields","env","EXPO_METRO_NO_MAIN_FIELD_OVERRIDE","result","preferNativePlatform","resolveRequest","undefined","getPackageMainPath","packageJsonPath","package_","moduleCache","getPackage","getMain","filePath","type","endsWith","platformBundlers","process","EXPO_ROUTER_APP_ROOT","getAppRouterRelativeEntryPath","EXPO_PROJECT_ROOT","WebSupportProjectPrerequisite","assertAsync","withMetroMultiPlatform","expoConfigPlatforms","Object","entries","filter","bundler","map","Array","isArray","resolver","platforms","Set","concat"],"mappings":"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"}
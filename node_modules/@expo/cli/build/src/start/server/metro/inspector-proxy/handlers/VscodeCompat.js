"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
class VscodeCompatHandler {
    /** Keep track of `Runtime.getProperties` responses to intercept, by request id */ interceptGetProperties = new Set();
    onDebuggerMessage(message, { socket  }) {
        // Hermes doesn't seem to handle this request, but `locations` have to be returned.
        // Respond with an empty location to make it "spec compliant" with Chrome DevTools.
        if (message.method === "Debugger.getPossibleBreakpoints") {
            const response = {
                id: message.id,
                result: {
                    locations: []
                }
            };
            socket.send(JSON.stringify(response));
            return true;
        }
        // Vscode doesn't seem to work nicely with missing `description` fields on `RemoteObject` instances.
        // See: https://github.com/microsoft/vscode-js-debug/issues/1583
        if (message.method === "Runtime.getProperties") {
            this.interceptGetProperties.add(message.id);
        }
        // Hermes and vscode have trouble setting breakpoints by `urlRegex` through `Debugger.setBreakpointByUrl`.
        // Vscode adds `file://` to a URL containing `http://`, which confuses Hermes and sets it to the wrong location.
        // Hermes needs to create the breakpoint to get the proper ID, but it must be unbounded.
        // Once the sourcemap is loaded, vscode will rebind the unbounded breakpoint to the correct location (using `Debugger.setBreakpoint`).
        if (message.method === "Debugger.setBreakpointByUrl" && message.params.urlRegex) {
            // Explicitly force the breakpoint to be unbounded
            message.params.url = "file://__invalid_url__";
            delete message.params.urlRegex;
        }
        return false;
    }
    onDeviceMessage(message) {
        // Vscode doesn't seem to work nicely with missing `description` fields on `RemoteObject` instances.
        // See: https://github.com/microsoft/vscode-js-debug/issues/1583
        if ("id" in message && this.interceptGetProperties.has(message.id)) {
            this.interceptGetProperties.delete(message.id);
            var _result;
            for (const item of (_result = message.result.result) != null ? _result : []){
                var ref;
                // Force-fully format the properties description to be an empty string
                // See: https://github.com/facebook/hermes/issues/114
                if (item.value) {
                    var _description;
                    item.value.description = (_description = item.value.description) != null ? _description : "";
                }
                // Avoid passing the `objectId` for symbol types.
                // When collapsing in vscode, it will fetch information about the symbol using the `objectId`.
                // The `Runtime.getProperties` request of the symbol hard-crashes Hermes.
                if (((ref = item.value) == null ? void 0 : ref.type) === "symbol" && item.value.objectId) {
                    delete item.value.objectId;
                }
            }
        }
        return false;
    }
}
exports.VscodeCompatHandler = VscodeCompatHandler;

//# sourceMappingURL=VscodeCompat.js.map
{"version":3,"sources":["../../../../../../src/start/server/metro/inspector-proxy/proxy.ts"],"sourcesContent":["import type { Server as HttpServer, IncomingMessage, ServerResponse } from 'http';\nimport type { Server as HttpsServer } from 'https';\nimport type { InspectorProxy as MetroProxy, Device as MetroDevice } from 'metro-inspector-proxy';\nimport { parse } from 'url';\nimport WS, { Server as WSServer } from 'ws';\n\nimport { Log } from '../../../../log';\n\nconst WS_DEVICE_URL = '/inspector/device';\nconst WS_DEBUGGER_URL = '/inspector/debug';\nconst WS_GENERIC_ERROR_STATUS = 1011;\n\nconst debug = require('debug')('expo:metro:inspector-proxy:proxy') as typeof console.log;\n\n// This is a workaround for `ConstructorType` not working on dynamically generated classes\ntype Instantiatable<Instance> = new (...args: any) => Instance;\n\nexport class ExpoInspectorProxy<D extends MetroDevice = MetroDevice> {\n  constructor(\n    public readonly metroProxy: MetroProxy,\n    private DeviceClass: Instantiatable<D>,\n    public readonly devices: Map<number, D> = new Map()\n  ) {\n    // monkey-patch the device list to expose it within the metro inspector\n    this.metroProxy._devices = this.devices;\n\n    // force httpEndpointMiddleware to be bound to this proxy instance\n    this.processRequest = this.processRequest.bind(this);\n  }\n\n  /**\n   * Initialize the server address from the metro server.\n   * This is required to properly reference sourcemaps for the debugger.\n   */\n  public setServerAddress(server: HttpServer | HttpsServer) {\n    const addressInfo = server.address();\n\n    if (typeof addressInfo === 'string') {\n      throw new Error(`Inspector proxy could not resolve the server address, got \"${addressInfo}\"`);\n    } else if (addressInfo === null) {\n      throw new Error(`Inspector proxy could not resolve the server address, got \"null\"`);\n    }\n\n    const { address, port, family } = addressInfo;\n\n    if (family === 'IPv6') {\n      this.metroProxy._serverAddressWithPort = `[${address ?? '::1'}]:${port}`;\n    } else {\n      this.metroProxy._serverAddressWithPort = `${address ?? 'localhost'}:${port}`;\n    }\n  }\n\n  /** @see https://chromedevtools.github.io/devtools-protocol/#endpoints */\n  public processRequest(req: IncomingMessage, res: ServerResponse, next: (error?: Error) => any) {\n    this.metroProxy.processRequest(req, res, next);\n  }\n\n  public createWebSocketListeners(server?: HttpServer | HttpsServer): Record<string, WSServer> {\n    if (server) {\n      this.setServerAddress(server);\n    }\n\n    return {\n      [WS_DEVICE_URL]: this.createDeviceWebSocketServer(),\n      [WS_DEBUGGER_URL]: this.createDebuggerWebSocketServer(),\n    };\n  }\n\n  private createDeviceWebSocketServer() {\n    const wss = new WS.Server({\n      noServer: true,\n      perMessageDeflate: false,\n    });\n\n    // See: https://github.com/facebook/metro/blob/eeb211fdcfdcb9e7f8a51721bd0f48bc7d0d211f/packages/metro-inspector-proxy/src/InspectorProxy.js#L157\n    wss.on('connection', (socket, request) => {\n      try {\n        const deviceId = this.metroProxy._deviceCounter++;\n        const { deviceName, appName } = getNewDeviceInfo(request.url);\n\n        this.devices.set(\n          deviceId,\n          new this.DeviceClass(deviceId, deviceName, appName, socket, this.metroProxy._projectRoot)\n        );\n\n        debug('New device connected: device=%s, app=%s', deviceName, appName);\n\n        socket.on('close', () => {\n          this.devices.delete(deviceId);\n          debug('Device disconnected: device=%s, app=%s', deviceName, appName);\n        });\n      } catch (error: unknown) {\n        let message = '';\n\n        debug('Could not establish a connection to on-device debugger:', error);\n\n        if (error instanceof Error) {\n          message = error.toString();\n          Log.error('Failed to create a socket connection to on-device debugger (Hermes engine).');\n          Log.exception(error);\n        } else {\n          Log.error(\n            'Failed to create a socket connection to on-device debugger (Hermes engine), unknown error.'\n          );\n        }\n\n        socket.close(WS_GENERIC_ERROR_STATUS, message || 'Unknown error');\n      }\n    });\n\n    return wss;\n  }\n\n  private createDebuggerWebSocketServer() {\n    const wss = new WS.Server({\n      noServer: true,\n      perMessageDeflate: false,\n    });\n\n    // See: https://github.com/facebook/metro/blob/eeb211fdcfdcb9e7f8a51721bd0f48bc7d0d211f/packages/metro-inspector-proxy/src/InspectorProxy.js#L193\n    wss.on('connection', (socket, request) => {\n      try {\n        const { deviceId, pageId } = getExistingDeviceInfo(request.url);\n        if (!deviceId || !pageId) {\n          // TODO(cedric): change these errors to proper error types\n          throw new Error(`Missing \"device\" and/or \"page\" IDs in query parameters`);\n        }\n\n        const device = this.devices.get(parseInt(deviceId, 10));\n        if (!device) {\n          // TODO(cedric): change these errors to proper error types\n          throw new Error(`Device with ID \"${deviceId}\" not found.`);\n        }\n\n        debug('New debugger connected: device=%s, app=%s', device._name, device._app);\n\n        device.handleDebuggerConnection(socket, pageId);\n\n        socket.on('close', () => {\n          debug('Debugger disconnected: device=%s, app=%s', device._name, device._app);\n        });\n      } catch (error: unknown) {\n        let message = '';\n\n        debug('Could not establish a connection to debugger:', error);\n\n        if (error instanceof Error) {\n          message = error.toString();\n          Log.error('Failed to create a socket connection to the debugger.');\n          Log.exception(error);\n        } else {\n          Log.error('Failed to create a socket connection to the debugger, unkown error.');\n        }\n\n        socket.close(WS_GENERIC_ERROR_STATUS, message || 'Unknown error');\n      }\n    });\n\n    return wss;\n  }\n}\n\nfunction asString(value: string | string[] = ''): string {\n  return Array.isArray(value) ? value.join() : value;\n}\n\nfunction getNewDeviceInfo(url: IncomingMessage['url']) {\n  const { query } = parse(url ?? '', true);\n  return {\n    deviceName: asString(query.name) || 'Unknown device name',\n    appName: asString(query.app) || 'Unknown app name',\n  };\n}\n\nfunction getExistingDeviceInfo(url: IncomingMessage['url']) {\n  const { query } = parse(url ?? '', true);\n  return {\n    deviceId: asString(query.device),\n    pageId: asString(query.page),\n  };\n}\n"],"names":["WS_DEVICE_URL","WS_DEBUGGER_URL","WS_GENERIC_ERROR_STATUS","debug","require","ExpoInspectorProxy","constructor","metroProxy","DeviceClass","devices","Map","_devices","processRequest","bind","setServerAddress","server","addressInfo","address","Error","port","family","_serverAddressWithPort","req","res","next","createWebSocketListeners","createDeviceWebSocketServer","createDebuggerWebSocketServer","wss","WS","Server","noServer","perMessageDeflate","on","socket","request","deviceId","_deviceCounter","deviceName","appName","getNewDeviceInfo","url","set","_projectRoot","delete","error","message","toString","Log","exception","close","pageId","getExistingDeviceInfo","device","get","parseInt","_name","_app","handleDebuggerConnection","asString","value","Array","isArray","join","query","parse","name","app","page"],"mappings":"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"}